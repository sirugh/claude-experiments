name: PR Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Discover and build all apps
        id: build
        run: |
          # Find all directories with package.json (excluding node_modules, .github, etc.)
          echo "Discovering apps..."
          apps=$(find . -maxdepth 2 -name "package.json" -not -path "*/node_modules/*" -not -path "*/.github/*" -not -path "./package.json" | xargs -I {} dirname {} | sed 's|^\./||')

          echo "Discovered apps: $apps"
          
          # Save apps list for later steps
          echo "apps<<EOF" >> $GITHUB_OUTPUT
          echo "$apps" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Build each app
          for app in $apps; do
            echo "======================================"
            echo "Building $app..."
            echo "======================================"
            if [ -f "$app/package.json" ]; then
              cd "$app"
              npm ci
              VITE_BASE_PATH="/claude-experiments/_pr/${{ github.event.pull_request.number }}/$app/" npm run build
              cd ..
            else
              echo "Warning: $app/package.json not found, skipping..."
            fi
          done

          echo "======================================"
          echo "All apps built successfully!"
          echo "======================================"

      - name: Checkout or create gh-pages branch
        run: |
          # Configure git identity first
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Try to checkout gh-pages, create if it doesn't exist
          git fetch origin gh-pages:gh-pages 2>/dev/null || {
            echo "gh-pages branch doesn't exist, creating it..."
            git checkout --orphan gh-pages
            git rm -rf .
            # Add root index.html to enable GitHub Pages
            echo '<!DOCTYPE html><html><head><title>Claude Experiments</title></head><body><h1>Claude Experiments</h1><p>PR previews are available at /_pr/&lt;number&gt;/</p></body></html>' > index.html
            git add index.html
            git commit -m "Initialize gh-pages branch"
            git push origin gh-pages
          }

          # Checkout gh-pages in a separate directory
          git clone --branch gh-pages --single-branch https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages

      - name: Deploy to PR preview directory
        run: |
          # Get list of apps from previous step
          apps="${{ steps.build.outputs.apps }}"

          echo "Deploying apps: $apps"

          # Deploy each app
          for app in $apps; do
            echo "Deploying $app..."
            if [ -d "$app/dist" ]; then
              mkdir -p gh-pages/_pr/${{ github.event.pull_request.number }}/$app
              cp -r $app/dist/* gh-pages/_pr/${{ github.event.pull_request.number }}/$app/
              echo "✓ $app deployed successfully"
            else
              echo "Warning: $app/dist not found, skipping deployment..."
            fi
          done

          # Ensure .nojekyll exists to disable Jekyll processing
          cd gh-pages
          if [ ! -f .nojekyll ]; then
            touch .nojekyll
            git add .nojekyll
          fi

          # Commit and push
          git add _pr/${{ github.event.pull_request.number }}
          git commit -m "Deploy PR #${{ github.event.pull_request.number }} preview" || echo "No changes to commit"
          git push origin gh-pages

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const baseUrl = `https://${{ github.repository_owner }}.github.io/claude-experiments/_pr/${prNumber}`;

            // Get list of apps from the build step
            const appsString = `${{ steps.build.outputs.apps }}`;
            const apps = appsString.trim().split('\n').filter(Boolean);

            console.log('Apps discovered:', apps);

            // Generate preview URLs for each app
            const appLinks = apps.map(app => {
              const appName = app.split('/').pop(); // Get directory name
              const displayName = appName
                .split('-')
                .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                .join(' ');
              return `- **${displayName}**: ${baseUrl}/${app}/`;
            }).join('\n');

            const comment = `## 🔍 PR Preview Deployed

            Your preview${apps.length > 1 ? 's are' : ' is'} ready:

            ${appLinks}

            ${apps.length > 1 ? 'These previews' : 'This preview'} will be automatically removed when the PR is closed or merged.`;

            // Find existing preview comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('PR Preview Deployed')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }
